kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: dmvx-ingress
  annotations:
    kubernetes.io/ingress.class: traefik
    # commented; this was forcing all routes (including "web") to use tls, even though only the "websecure" route supports it (which was making non-https requests unresolvable, ie. always returning 404)
    # (note that with this commented, the websecure route now requires the tls:true flag, else it has the same issue in the opposite direction)
    #traefik.ingress.kubernetes.io/router.tls: "true"
    #traefik.ingress.kubernetes.io/router.tls.certresolver: default

    # ingress.kubernetes.io/hsts-max-age: "315360000"
    # ingress.kubernetes.io/hsts-include-subdomains: "true"
    # ingress.kubernetes.io/custom-frame-options-value: "SAMEORIGIN"
    # ingress.kubernetes.io/content-type-nosniff: "true"
    # ingress.kubernetes.io/browser-xss-filter: "true"
    #traefik.ingress.kubernetes.io/custom-response-headers: "Server:||X-Application-Context:||X-Powered-By:||exception:||Access-Control-Allow-Headers:CONNECT, DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT"
spec:
  rules:
    # the direct, ovh-cluster domain-name (for some dev use-cases, eg. long-running requests that the cloudflare-proxy would drop)
    # ==========

    - host: 9m2x1z.nodes.c1.or1.k8s.ovh.us
      http:
        paths:
          - backend:
              service:
                name: dm-web-server
                port:
                  number: 5100
            pathType: ImplementationSpecific
    - host: app-server.9m2x1z.nodes.c1.or1.k8s.ovh.us
      http:
        paths:
          - backend:
              service:
                name: dm-app-server
                port:
                  number: 5110
            pathType: ImplementationSpecific
    - host: monitor.9m2x1z.nodes.c1.or1.k8s.ovh.us
      http:
        paths:
          - backend:
              service:
                name: dm-monitor-backend
                port:
                  number: 5130
            pathType: ImplementationSpecific

    # debatemap.app (for end-users)
    # ==========

    - host: debatemap.app
      http:
        paths:
          -
            backend:
              service:
                name: dm-web-server
                port:
                  number: 5100
            pathType: ImplementationSpecific
    - host: app-server.debatemap.app
      http:
        paths:
          - backend:
              service:
                name: dm-app-server
                port:
                  number: 5110
            pathType: ImplementationSpecific
    - host: monitor.debatemap.app
      http:
        paths:
          - backend:
              service:
                name: dm-monitor-backend
                port:
                  number: 5130
            pathType: ImplementationSpecific
    # grafana is made directly accessible (unlike prometheus, etc.) because it has its own authentication barrier (also helpful for direct-linking to subpages)
    - host: grafana.debatemap.app
      http:
        paths:
          - backend:
              service:
                name: loki-stack-grafana-proxy
                namespace: monitoring # this doesn't work
                port:
                  number: 3000
            pathType: ImplementationSpecific

    # debates.app (for end-users)
    # ==========

    - host: debates.app
      http:
        paths:
          -
            backend:
              service:
                name: dm-web-server
                port:
                  number: 5100
            pathType: ImplementationSpecific
    - host: app-server.debates.app
      http:
        paths:
          - backend:
              service:
                name: dm-app-server
                port:
                  number: 5110
            pathType: ImplementationSpecific
    - host: monitor.debates.app
      http:
        paths:
          - backend:
              service:
                name: dm-monitor-backend
                port:
                  number: 5130
            pathType: ImplementationSpecific
    # grafana is made directly accessible (unlike prometheus, etc.) because it has its own authentication barrier (also helpful for direct-linking to subpages)
    - host: grafana.debates.app
      http:
        paths:
          - backend:
              service:
                name: loki-stack-grafana-proxy
                namespace: monitoring # this doesn't work
                port:
                  number: 3000
            pathType: ImplementationSpecific

# set up proxy-service in default-namespace that routes to the actual grafana service
# todo: confirm whether this is correct/working
---
apiVersion: v1
kind: Service
metadata:
  name: loki-stack-grafana-proxy
  namespace: default
spec:
  type: ExternalName
  externalName: loki-stack-grafana.monitoring.svc.cluster.local
  ports:
  - name: http
    port: 3000
    protocol: TCP

# test
# ---
# kind: Ingress
# apiVersion: networking.k8s.io/v1
# metadata:
#   name: dmvx-ingress-for-monitoring-namespace
#   namespace: monitoring
#   annotations:
#     kubernetes.io/ingress.class: traefik
# spec:
#   rules:
#     # debatemap.app (for end-users)
#     # ==========

#     # grafana is made directly accessible (unlike prometheus, etc.) because it has its own authentication barrier (also helpful for direct-linking to subpages)
#     - host: grafana.debatemap.app
#       http:
#         paths:
#           - backend:
#               service:
#                 name: loki-stack-grafana.monitoring
#                 port:
#                   number: 3000
#             pathType: ImplementationSpecific

#     # debates.app (for end-users)
#     # ==========

#     # grafana is made directly accessible (unlike prometheus, etc.) because it has its own authentication barrier (also helpful for direct-linking to subpages)
#     - host: grafana.debates.app
#       http:
#         paths:
#           - backend:
#               service:
#                 name: loki-stack-grafana.monitoring
#                 port:
#                   number: 3000
#             pathType: ImplementationSpecific