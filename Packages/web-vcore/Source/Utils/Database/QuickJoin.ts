/*export function QuickJoinByForwardSlash(parts: (string | number)[]) {
	let p = parts;
	switch (p.length) {
		case 1: return  `${p[0]}`;
		case 2: return  `${p[0]}/${p[1]}`;
		case 3: return  `${p[0]}/${p[1]}/${p[2]}`;
		case 4: return  `${p[0]}/${p[1]}/${p[2]}/${p[3]}`;
		case 5: return  `${p[0]}/${p[1]}/${p[2]}/${p[3]}/${p[4]}`;
		case 6: return  `${p[0]}/${p[1]}/${p[2]}/${p[3]}/${p[4]}/${p[5]}`;
		case 7: return  `${p[0]}/${p[1]}/${p[2]}/${p[3]}/${p[4]}/${p[5]}/${p[6]}`;
		case 8: return  `${p[0]}/${p[1]}/${p[2]}/${p[3]}/${p[4]}/${p[5]}/${p[6]}/${p[7]}`;
		case 9: return  `${p[0]}/${p[1]}/${p[2]}/${p[3]}/${p[4]}/${p[5]}/${p[6]}/${p[7]}/${p[8]}`;
		case 10: return `${p[0]}/${p[1]}/${p[2]}/${p[3]}/${p[4]}/${p[5]}/${p[6]}/${p[7]}/${p[8]}/${p[9]}`;
		case 11: return `${p[0]}/${p[1]}/${p[2]}/${p[3]}/${p[4]}/${p[5]}/${p[6]}/${p[7]}/${p[8]}/${p[9]}/${p[10]}`;
		case 12: return `${p[0]}/${p[1]}/${p[2]}/${p[3]}/${p[4]}/${p[5]}/${p[6]}/${p[7]}/${p[8]}/${p[9]}/${p[10]}/${p[11]}`;
		case 13: return `${p[0]}/${p[1]}/${p[2]}/${p[3]}/${p[4]}/${p[5]}/${p[6]}/${p[7]}/${p[8]}/${p[9]}/${p[10]}/${p[11]}/${p[12]}`;
		case 14: return `${p[0]}/${p[1]}/${p[2]}/${p[3]}/${p[4]}/${p[5]}/${p[6]}/${p[7]}/${p[8]}/${p[9]}/${p[10]}/${p[11]}/${p[12]}/${p[13]}`;
		case 15: return `${p[0]}/${p[1]}/${p[2]}/${p[3]}/${p[4]}/${p[5]}/${p[6]}/${p[7]}/${p[8]}/${p[9]}/${p[10]}/${p[11]}/${p[12]}/${p[13]}/${p[14]}`;
		case 16: return `${p[0]}/${p[1]}/${p[2]}/${p[3]}/${p[4]}/${p[5]}/${p[6]}/${p[7]}/${p[8]}/${p[9]}/${p[10]}/${p[11]}/${p[12]}/${p[13]}/${p[14]}/${p[15]}`;
		case 17: return `${p[0]}/${p[1]}/${p[2]}/${p[3]}/${p[4]}/${p[5]}/${p[6]}/${p[7]}/${p[8]}/${p[9]}/${p[10]}/${p[11]}/${p[12]}/${p[13]}/${p[14]}/${p[15]}/${p[16]}`;
		case 18: return `${p[0]}/${p[1]}/${p[2]}/${p[3]}/${p[4]}/${p[5]}/${p[6]}/${p[7]}/${p[8]}/${p[9]}/${p[10]}/${p[11]}/${p[12]}/${p[13]}/${p[14]}/${p[15]}/${p[16]}/${p[17]}`;
		case 19: return `${p[0]}/${p[1]}/${p[2]}/${p[3]}/${p[4]}/${p[5]}/${p[6]}/${p[7]}/${p[8]}/${p[9]}/${p[10]}/${p[11]}/${p[12]}/${p[13]}/${p[14]}/${p[15]}/${p[16]}/${p[17]}/${p[18]}`;
		case 20: return `${p[0]}/${p[1]}/${p[2]}/${p[3]}/${p[4]}/${p[5]}/${p[6]}/${p[7]}/${p[8]}/${p[9]}/${p[10]}/${p[11]}/${p[12]}/${p[13]}/${p[14]}/${p[15]}/${p[16]}/${p[17]}/${p[18]}/${p[19]}`;
	}
	// if it's longer, just use normal join
	return parts.join("/");
}*/